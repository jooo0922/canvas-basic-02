'use strict';

// 먼저 우리가 그릴 캔버스 html element 를 가져와야 함.
const canvas = document.querySelector('.canvas');
// 그 다음에, 우리가 그림을 그릴때는 canvas의 context라는 객체를 이용해서 다 작업을 하기 때문에 그거를 얻어오면 됨.
const context = canvas.getContext('2d'); // 그리고 '2d' 라고 파라미터를 넣어줘야 함.
// 여기까지는 뭐 항상 기본적으로 자동으로 해줘야 한다고 보면 된다.
// 이렇게 하면 context 객체가 return이 되고, 우리는 이걸 이용해서 캔버스에서 모든 작업을 하는거임.
// console.log(context);

// fillRect
/**
 * 자 우리가 캔버스를 하나의 도화지라고 생각하면, 그릴 위치부터 먼저 잡아야 됨.
 * (x, y)를 (0, 0)으로 하면 (0, 0) 위치에 그리겠다는 거임.
 * 캔버스 판에서 0, 0이라는 거는 왼쪽 위를 가리킴.
 * 캔버스 뿐만 아니라 원래 컴퓨터 그래픽스에서는 왼쪽 위가 기본임.
 * 
 * 그 다음 사각형을 얼만큼의 크기로 그릴 것이냐. width, height 순서로 써주면 됨
 * 
 * 이렇게 4개의 parameter (x, y, width, height)를 전달해주고 호출하면 검정색 정사각형이 그려짐
 * 왜 검은색일까? 기본값이 검은색이기 때문
 */
// 색상을 지정하려면 fillStyle 속성을 이용할 것.
// 여기에는 보통 우리가 css에서 쓰는 색상 포맷을 넣을 수 있다고 보면 됨. colorname, #xxxxxx, rgba() 등
context.fillRect(50, 50, 100, 100); // 여기서 50, 50 위치에 검정색 기본값으로 정사각형을 그려주고
context.fillStyle = 'red'; // 색깔을 red로 바꾼 다음
context.fillRect(0, 0, 100, 100); // 0, 0 위치에 정사각형을 하나 더 그림. 따라서 여기에만 빨강색이 적용되는 것.
// css처럼 하나에 스타일속성을 적용한다고 모든거에 적용되지 않음.
// 이거는 마치 그림을 그리는 과정으로 생각해야 됨. fillStyle에 색상값을 할당하는 순간 '붓에 물감을 찍었다'고 생각해야 함.
// 그니까 붓에 물감이 묻어 있어야 색칠을 할 수 있을거 아냐. 그니까 fillStyle을 할당한 이후의 line부터 색상값이 적용되는 것.
// 이제 fillStyle = ' red'; 로 하고나면 그 이후의 line부터는 뭘 그리던 계속 빨강색으로 칠해질 거임.
// 캔버스는 기존의 html, css로 요소나 도형을 만들어내는 것과는 헷갈리기 쉬운 개념임. 캔버스 자체를 그림처럼 생각해야 함.
// 캔버스 안에 내용물은 css, html로 어떻게 할 수가 없음. 그냥 '그림'으로 생각할 것.

// clearRect = 지우개
// 80 80 위치에 50 50 크기만큼의 사각형을 '지운다' 라는 개념. 
// 앞에 그린 사각형이 사라지거나 뭐 그런 게 아니고, 그냥 해당 위치에 해당 크기만큼 구멍이 뻥 뚫림. 지워진 것.
// 그림으로 생각한다면 이해하기 쉬움.
context.clearRect(80, 80, 50, 50);

// strokeRect
// 캔버스에서 그림이란? 1.색을 채우는 것 2.선을 긋는 것
// 그래서 fillRect는 색을 칠하는 거였다면, strokeRect는 '선을 긋는 것, 획을 긋는 것.'
context.strokeRect(150, 150, 100, 100);

// 사실 캔버스는 코드로 뭘 그려내기 보다는, 이미지를 가져와서 쓰는 경우가 더 많음.